##############################################
Chapter 03: Jupyter Notebook Demonstration — Python Basics and Packages
##############################################

.. contents:: Table of Contents
   :depth: 2
   :local:

Welcome to Chapter 03!

This chapter guides you through hands-on exploration of Python’s basic functionality and essential external packages, all using Jupyter Notebook. You will learn to operate interactively, execute code cells, and leverage packages that are crucial for data science and general programming.

*******************
Objectives
*******************

By the end of this chapter, you will be able to:

- Launch and use Jupyter Notebook for interactive Python programming
- Write, edit, and run code cells within a notebook
- Import and apply fundamental Python packages: math, random, datetime
- Install and use essential data science packages: numpy, pandas, matplotlib
- Document and save your code and results in notebook format

*******************
Getting Started with Jupyter Notebook
*******************

**Launch Jupyter Notebook:**

Open your terminal/command prompt and enter:

.. code-block:: bash

   jupyter notebook

A browser window will open. To create a new notebook:

1. Click "New" → "Python 3" (or your installed Python version).
2. Name your notebook (e.g., `python_basics_packages_demo.ipynb`).

*******************
Basic Operations in Jupyter
*******************

Jupyter cells can be for code or text (Markdown). You can:

- **Execute a code cell:** Press `Shift+Enter`
- **Add new cells:** Use the `+` button or menu
- **Change cell type:** Use the dropdown labeled "Code" or "Markdown"

**Example code cell:**

.. code-block:: python

   print("Welcome to Python in Jupyter Notebook!")

*******************
Demonstrating Python Built-in Packages
*******************

Let's try three frequently used built-in modules:

1. **math**: Provides mathematical functions.

.. code-block:: python

   import math
   print("Square root of 16:", math.sqrt(16))
   print("Pi constant:", math.pi)

2. **random**: For random numbers and choices.

.. code-block:: python

   import random
   print("Random integer between 1 and 10:", random.randint(1, 10))
   print("Random choice from a list:", random.choice(['apple', 'banana', 'cherry']))

3. **datetime**: Working with dates and times.

.. code-block:: python

   from datetime import datetime
   now = datetime.now()
   print("Current date and time:", now.strftime("%Y-%m-%d %H:%M:%S"))

*******************
Installing and Importing External Packages
*******************

To use packages like numpy, pandas, matplotlib — install them first if not already available:

.. code-block:: bash

   pip install numpy pandas matplotlib

**You can run shell commands in Jupyter by prefixing with `!`**:

.. code-block:: python

   !pip install numpy pandas matplotlib

*******************
Hands-On: Using Data Science Packages
*******************

**1. numpy: Numeric processing and arrays**

.. code-block:: python

   import numpy as np
   arr = np.array([2, 4, 6, 8])
   print("Array:", arr)
   print("Mean:", np.mean(arr))
   print("Standard Deviation:", np.std(arr))

**2. pandas: Data analysis and tabular data**

.. code-block:: python

   import pandas as pd
   data = {'Name': ['Amit', 'Priya', 'John'], 'Score': [85, 92, 78]}
   df = pd.DataFrame(data)
   print(df)
   print("Average score:", df['Score'].mean())

**3. matplotlib: Plotting and visualization**

.. code-block:: python

   import matplotlib.pyplot as plt

   x = [1, 2, 3, 4]
   y = [10, 15, 8, 13]

   plt.plot(x, y, marker='o')
   plt.title("Sample Line Plot")
   plt.xlabel("X Axis")
   plt.ylabel("Y Axis")
   plt.show()

*******************
Best Practices in Notebooks
*******************

- Use text/Markdown cells to **explain your code and results**.
- Name variables meaningfully.
- Run all cells and save your notebook regularly.

*******************
Activities
*******************

1. **Experiment:** Try modifying the math, random, and datetime code to see new results.
2. **Data Analysis:** Create your own pandas DataFrame and calculate the sum, min, and max of a column.
3. **Visualization:** Plot a bar chart using matplotlib for any data you choose.

*******************
Summary
*******************

- You learned to operate in Jupyter Notebook and practiced code execution.
- Explored built-in modules (`math`, `random`, `datetime`) and widely used data science packages (`numpy`, `pandas`, `matplotlib`).
- Practiced with interactive code, data analysis, and visualization.

*******************
Further Resources
*******************

- Jupyter Notebook Docs: https://jupyter-notebook.readthedocs.io/
- numpy User Guide: https://numpy.org/doc/stable/user/index.html
- pandas Docs: https://pandas.pydata.org/
- matplotlib Tutorials: https://matplotlib.org/stable/tutorials/index.html

----

.. note::

   Working in Jupyter Notebook makes your Python learning interactive, visual, and fun! Save your practice notebook for future reference and keep experimenting.
Happy coding!